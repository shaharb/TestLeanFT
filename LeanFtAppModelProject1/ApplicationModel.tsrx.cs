//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace LeanFtAppModelProject1
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "12.52")]
	public class ApplicationModel : AppModelBase
	{
		#region Constructors

		public ApplicationModel(ITestObject contextTestObject)
		{
			Name = @"ApplicationModel";
			Test1 = new Test1Node(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public Test1Node Test1 { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class Test1Node : ButtonNodeBase
		{
			#region Constructors
		
			public Test1Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"test1";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WPF.ButtonDescription CreateDescription()
			{
				return new HP.LFT.SDK.WPF.ButtonDescription
				{
					Name = @"Button"
				};
			}
		
			#endregion
		
		}

		#endregion

		#region Base Classes

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.WPF.IButton, HP.LFT.SDK.WPF.ButtonDescription>, HP.LFT.SDK.WPF.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TValue GetObjectProperty<TValue>(string propName) 
			{
				return Concrete.GetObjectProperty<TValue>(propName);
			}
	
			public void MakeVisible()
			{
				 Concrete.MakeVisible();
			}
	
			public void ShowContextMenu()
			{
				 Concrete.ShowContextMenu();
			}
	
			public void MouseMove(HP.LFT.SDK.Location moveTo)
			{
				 Concrete.MouseMove(moveTo);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.DoubleClick(button);
			}
	
			public void DoubleClick(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
			{
				 Concrete.SendKeys(input, modifiers);
			}
	
			public void SendKeys(string input)
			{
				 Concrete.SendKeys(input);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			#endregion
	
			#region Public Properties
	
			public string HelpText
			{
				get { return Concrete.HelpText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string ParentText
			{
				get { return Concrete.ParentText; }		
			}
	
			public HP.LFT.SDK.WPF.IToggleButton ToggleButton
			{
				get { return Concrete.ToggleButton; }		
			}
	
			public bool CanFocus
			{
				get { return Concrete.CanFocus; }		
			}
	
			public string ObjectName
			{
				get { return Concrete.ObjectName; }		
			}
	
			public string FullNamePath
			{
				get { return Concrete.FullNamePath; }		
			}
	
			public string FullType
			{
				get { return Concrete.FullType; }		
			}
	
			public string AttachedText
			{
				get { return Concrete.AttachedText; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public bool IsFocused
			{
				get { return Concrete.IsFocused; }		
			}
	
			public string NativeClass
			{
				get { return Concrete.NativeClass; }		
			}
	
			public string WindowTitleRegExp
			{
				get { return Concrete.WindowTitleRegExp; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.IntPtr Handle
			{
				get { return Concrete.Handle; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		#endregion
	}
}
